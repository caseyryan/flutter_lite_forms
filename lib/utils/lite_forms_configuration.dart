import 'package:flutter/material.dart';
import 'package:lite_forms/base_form_fields/lite_drop_selector/lite_drop_selector.dart';
import 'package:lite_forms/base_form_fields/lite_text_form_field.dart';
import 'package:lite_forms/constants.dart';
import 'package:lite_forms/controllers/lite_form_controller.dart';

class LiteFormsConfiguration {
  final AutovalidateMode? autovalidateMode;

  final String? defaultDateFormat;
  final String? defaultTimeFormat;

  /// if this is true and you don't pass hintText to a
  /// form field, it will automatically generate it based on the field's name
  /// value, using splitByCamelCase method()
  final bool useAutogeneratedHints;

  /// a default settings for text entry using [LiteTextEntryType.onModalRoute]
  final TextEntryModalRouteSettings? defaultTextEntryModalRouteSettings;

  /// Will automatically hide the keyboard if you tap outside
  /// of the focused text input. This can also be set individually for
  /// each form via a [LiteFormGroup] constructor
  /// Has no effect on web
  final bool? allowUnfocusOnTapOutside;

  final LiteDropSelectorSettings dropSelectorSettings;

  final LiteFormsTheme? lightTheme;
  final LiteFormsTheme? darkTheme;

  TextStyle? get defaultTextStyle {
    return _activeTheme?.defaultTextStyle;
  }

  InputDecoration? get inputDecoration {
    return _activeTheme?.inputDecoration;
  }

  BoxDecoration? get filePickerDecoration {
    return _activeTheme?.filePickerDecoration;
  }

  Color? get shadowColor {
    return _activeTheme?.shadowColor;
  }

  Color? get destructiveColor {
    return _activeTheme?.destructiveColor;
  }

  Color? get dropSelectorChipColor {
    return _activeTheme?.dropSelectorChipColor;
  }

  LiteFormsTheme? get _activeTheme {
    return isDarkTheme ? darkTheme : lightTheme;
  }

  /// [LiteFormsConfiguration.vanila] is a default preset which you can
  /// use as a starting point 
  factory LiteFormsConfiguration.vanila(BuildContext context,) {
    final primaryColor = Theme.of(context).primaryColor;
    const cornerRadius = 6.0;
    const normalBorderWidth = .1;
    const focusedBorderWidth = .4;
    const borderRadius = BorderRadius.only(
      topLeft: Radius.circular(
        cornerRadius,
      ),
      topRight: Radius.circular(
        cornerRadius,
      ),
      bottomRight: Radius.circular(
        cornerRadius,
      ),
      bottomLeft: Radius.circular(
        cornerRadius,
      ),
    );
    const defaultBorder = OutlineInputBorder(
      borderRadius: borderRadius,
    );

    /// Must be called in the beginning.
    /// Basically that's all you need
    /// to start using Lite Forms
    // initializeLiteForms(
    /// optional configuration which will be used as default
    return LiteFormsConfiguration(
      defaultDateFormat: 'dd MMM, yyyy',
      defaultTimeFormat: 'HH:mm',
      dropSelectorSettings: const LiteDropSelectorSettings(),
      autovalidateMode: AutovalidateMode.onUserInteraction,
      useAutogeneratedHints: true,
      allowUnfocusOnTapOutside: true,
      defaultTextEntryModalRouteSettings: TextEntryModalRouteSettings(
        backgroundOpacity: .95,
      ),
      lightTheme: LiteFormsTheme(
        destructiveColor: Colors.red,
        filePickerDecoration: const BoxDecoration(
          borderRadius: borderRadius,
          border: Border.fromBorderSide(
            BorderSide(
              width: normalBorderWidth,
            ),
          ),
        ),
        inputDecoration: InputDecoration(
          filled: false,
          errorStyle: const TextStyle(
            fontSize: 16.0,
            color: Colors.red,
          ),
          border: defaultBorder,
          enabledBorder: defaultBorder.copyWith(
            borderSide: const BorderSide(
              width: normalBorderWidth,
            ),
          ),
          focusedBorder: defaultBorder.copyWith(
            borderSide: BorderSide(
              width: focusedBorderWidth,
              color: primaryColor,
            ),
          ),
        ),
      ),
      darkTheme: LiteFormsTheme(
        destructiveColor: Colors.redAccent,
        inputDecoration: InputDecoration(
          filled: false,
          errorStyle: const TextStyle(
            fontSize: 16.0,
            color: Colors.redAccent,
          ),
          border: defaultBorder,
          enabledBorder: defaultBorder.copyWith(
            borderSide: const BorderSide(
              width: normalBorderWidth,
              color: Colors.white,
            ),
          ),
          focusedBorder: defaultBorder.copyWith(
            borderSide: const BorderSide(
              width: focusedBorderWidth,
              color: Colors.white,
            ),
          ),
        ),
        filePickerDecoration: const BoxDecoration(
          borderRadius: borderRadius,
          border: Border.fromBorderSide(
            BorderSide(
              width: normalBorderWidth,
              color: Colors.white,
            ),
          ),
        ),
      ),
    );
  }

  LiteFormsConfiguration({
    this.lightTheme,
    this.darkTheme,
    this.autovalidateMode,
    this.dropSelectorSettings = const LiteDropSelectorSettings(
      topLeftRadius: kDefaultFormSmoothRadius,
      topRightRadius: kDefaultFormSmoothRadius,
      bottomLeftRadius: kDefaultFormSmoothRadius,
      bottomRightRadius: kDefaultFormSmoothRadius,
    ),

    /// [defaultDateFormat] is a string pattern acceptable by [DateFormat]
    /// for example 'yyyy-MM-dd'
    this.defaultDateFormat,
    this.defaultTextEntryModalRouteSettings,

    /// [defaultTimeFormat] is a string pattern acceptable by [DateFormat]
    /// for example 'HH:mm' for a 24 hour format and 'hh:mm a' for 12
    this.defaultTimeFormat,
    this.allowUnfocusOnTapOutside,
    this.useAutogeneratedHints = false,
  });
}

class LiteFormsTheme {
  const LiteFormsTheme({
    this.defaultTextStyle,
    this.inputDecoration,
    this.shadowColor,
    this.dropSelectorChipColor,
    this.filePickerDecoration,
    this.destructiveColor,
  });

  final TextStyle? defaultTextStyle;
  final Color? destructiveColor;
  final InputDecoration? inputDecoration;
  final BoxDecoration? filePickerDecoration;
  final Color? shadowColor;
  final Color? dropSelectorChipColor;
}
