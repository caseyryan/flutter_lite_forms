import 'package:flutter/material.dart';
import 'package:lite_forms/base_form_fields/lite_form_group.dart';
import 'package:lite_forms/controllers/lite_form_controller.dart';
import 'package:lite_forms/utils/string_extensions.dart';
import 'package:lite_forms/utils/value_serializer.dart';
import 'package:lite_forms/utils/value_validator.dart';

typedef OnChanged = Function(Object? value);

mixin FormFieldMixin<T extends StatefulWidget> on State<T> {
  late final LiteFormGroup group;
  late final FormGroupField field;
  late final String _fieldName;

  dynamic _value;
  dynamic get value => _value;

  String? hintText;
  TextStyle? _errorStyle;

  String get formName => group.name;

  late InputDecoration decoration;
  bool _isInitialized = false;

  TextEditingController? get textEditingController {
    return field.getOrCreateTextEditingController();
  }

  bool _hasSetInitialValue = false;

  void resetInitialValueFlag() {
    _hasSetInitialValue = false;
  }

  void setInitialValue(VoidCallback setter) {
    if (!_hasSetInitialValue) {
      _hasSetInitialValue = true;
      setter();
    }
  }

  void initializeFormField<E>({
    required String fieldName,
    required AutovalidateMode? autovalidateMode,
    required LiteFormValueConvertor serializer,
    required LiteFormValueConvertor? initialValueDeserializer,
    required List<LiteFormFieldValidator<Object?>>? validators,
    required Object? initialValue,
    required String? hintText,
    required InputDecoration? decoration,
    required TextStyle? errorStyle,
  }) {
    if (!_isInitialized) {
      _isInitialized = true;
      _errorStyle = errorStyle;
      _fieldName = fieldName;
      group = LiteFormGroup.of(context)!;
      field = liteFormController.registerFormFieldIfNone<E>(
        fieldName: _fieldName,
        formName: group.name,
        serializer: serializer,
        validators: validators,
        autovalidateMode: autovalidateMode,
      );
      final storedValue = liteFormController.tryGetValueForField(
        formName: group.name,
        fieldName: _fieldName,
      ) as E?;
      if (E == String) {
        _value = storedValue ??
            initialValueDeserializer?.call(initialValue)?.toString() ??
            initialValue?.toString();
      } else {
        _value = storedValue ??
            initialValueDeserializer?.call(initialValue) as E? ??
            initialValue as E?;
      }

      this.hintText = group.translationBuilder(hintText);
      if (hintText?.isNotEmpty != true) {
        if (liteFormController.config?.useAutogeneratedHints == true) {
          this.hintText = _fieldName.splitByCamelCase();
        }
      }
      this.decoration = decoration ??
          liteFormController.config?.inputDecoration ??
          const InputDecoration();
      if (this.hintText?.isNotEmpty == true) {
        this.decoration = this.decoration.copyWith(
              hintText: this.hintText,
            );
      }
    }
  }

  TextStyle get errorStyle {
    return _errorStyle ??
        liteFormController.config?.inputDecoration?.errorStyle ??
        TextStyle(color: Theme.of(context).colorScheme.error);
  }
}
